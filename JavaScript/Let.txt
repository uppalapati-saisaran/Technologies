- Variables declared with let have Block Scope.
- Variables declared with let must be Declared before use.
- Variables declared with let cannot be redeclared in the same scope.

Block Scope:

- let and const keywords provided block scope in javascript. It is not before ES6.
- Variables declared inside a {}  block cannot be accessed from outside the block:
  {
    let x = 2;
  }
  
Global Scope:

- Variables declared with the var always have global scope.
- Variables declared with the var keyword can NOT have block scope. 
- Variables declared with the var inside a {} block can be accessed from outside the block:
  {
	var x = 2;
  }
  // x can used here
  
Cannot be Redeclared:

- Variables defined with let can not be redeclared.
- You can not accidentally redeclare a variable declared with let.
- With let you can not do this 
  let x = "John Doe";
  let x = 0;

- Variables defined with var can be redeclared.
  var x = "John Doe"
  var x = 0;


Redeclaring Variables: 

- Redeclaring a variable using the var keyword can impose problems.
- Redeclaring a variable inside a block will also redeclare the variable outside the block.

<!DOCTYPE html>
<html>
<body>
<h2>Redeclaring a Variable Using var</h2>
<p id="demo"></p>
<script>
var x = 10;
// Here x is 10
{
var x = 2;
// Here x is 2
}

<script>
//Here x is 2
document.getElementById("demo").innerHTML = x;
</script>
</body>
</html>

- Redeclaring a variable using the let keyword can solve this problem.
- Redeclaring a variable inside a block will not redeclare the variable outside the block:

<!DOCTYPE html>
<html>
<body>
<h2>Redeclaring a Variable using let</h2>
<p id="demo"></p>
<script>
let x = 10;
// Here x is 10
{
	let x = 2;
	// Here x is 2
}
// Here x is 10
document.getElementById("demo").innerHTML = x;
</script>
</body>
</html>


* Let Hoisting

- Variables defined with var are hoisted to the top an can be initialized at any time.
  Meaning: you can use the variable before it is declared.
  
carName = "Volvo";
var carName;

<!DoCTYPE html>
<html>
<body>
<h2>JavaScript Hoisting</h2>
<p>With <b>var</b>, you can a variable before it is declared:</p>
<p id="demo"></p>
<script>
carName = "Volvo";
document.getElementById("demo").innerHTML = carName;
var carName;
</script>
</body>
</html>

* Variables defined with let are also hoisted to the top of the block, but not initialized.
Meaning : Using a let variable before it is declared with result in a ReferenceError:

<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Hoisting</h2>
<p>With <b>let</b>, you cannot use a variable before it is declared.</p>
<p id="demo"></p>
<script>
try 
{
	carName = "Saab";
	let carName = "Volvo";
}
catch(err)
{
document.getElementById("demo").innerHTML = err;
}
</script>
</body>
</html>

Output:

JavaScript Hoisting
With let, you cannot use a variable before it is declared.

ReferenceError: Cannot access 'carName' before initialization








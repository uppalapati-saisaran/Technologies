Iterating Arrays :

- Iterating means going through elements one by one.
- If we iterate on a 1-D array it will go through each element one by one.
- Iterate on the elements of the following 1-D array:

import numpy as np
arr = np.array([1,2,3])
for x in arr:
	print(x)

Output:
1
2
3

Iterating 2-D arrays :

- Iterate on the elements of the following 2-D array:
import numpy as np
arr=np.array([1,2,3],[4,5,6])
for x in arr:
	print(x) 
	
Output:
[1 2 3]
[4 5 6]

- To return the actual values, the scalars, we have to iterate the arrays in each dimension. 
- Iterate on each scalar element of the 2-D array:

import numpy as np
arr = np.array([1,2,3],[4,5,6]])
for x in arr:
	for y in x:
	  print(y) 

Output:

1
2
3
4
5
6

- Iterating Arrays Using nditer() 
- Iterating on each scalar element : In basic for loops, iterating through each scalar of an array we need to use n loops which can be difficult
                                     to write for arrays with very high dimensionality.

- Iterate through the following 3-D array:
  import numpy as np
  arr = np.array([[1,2],[3,4]],[[5,6],[7,8]]])
  for x in np.nditer(arr):
	print(x) 
	
Output: 
1
2
3
4
5
6
7
8

- Iterating Array with different data types:
- We can use op_dtypes argument and pass it the expected datatype to change the datatype of elements while iterating.
- Numpy does not change the data type of the element in-place(where the element is in array) so it needs some other space to perform this action,
  that extra space is called buffer, and inorder to enable it in nditer() we pass flags=['buffered']
- Iterate through the array as a string
  import numpy as np
  arr = np.array([1,2,3])
  for x in np.nditer(arr,flags=['buffered'],op_dtypes=['S']):
	print(x)
	
Output:

b'1'
b'2'
b'3'

- Iterating with different step size
- Iterate through every scalar element of the 2D array skipping 1 element:
  import numpy as np
  arr = np.array([[1,2,3,4],[5,6,7,8]])
  for x in np.nditer(arr[:,::2]):
	print(x)

1
3
5
7

- Enumerated Iteration using ndenumerate() 
- Enumeration means mentioning sequence number of somethings one by one. 
- Enumerate on following 1D arrays elements:
  import numpy as np
  arr=np.array([1,2,3])
  for idx, x in np.ndenumerate(arr):
	print(idx,x) 

Output:
(0,) 1
(1,) 2
(2,) 3

- Enumerate on following 2D array's elements:
  import numpy as np
  arr = np.array([[1,2,3,4],[5,6,7,8]])
  for idx,x in np.ndenumerate(arr):
	print(idx,x) 
	
  
Data Types in Python :

- By default Python have these data types:

 (01) strings - used to represent text data, the text is given under quote marks. e.g, "ABCD"
 (02) integer - used to represent integer numbers. e.g., -1,-2,-3
 (03) float - used to represent real numbers e.g. 1.2,42.42
 (04) boolean - used to represent True or False
 (05) complex - used to represent complex numbers. e.g. 1.0 + 2.0j, 1.5+2.5j
 
Data Types in NumPy:

- NumPy has some extra data types, and refer to data types with one character, like i for integer etc

  * i - integer , b - boolean , u - unsigned integer, f - float, c - complex float 
    m - timedelta  M - datetime o - object s - string U - unicode string V - fixed chunk of memory for other types (void) 
	

- The NumPy array object has as property called dtype that returns the datatype of the array:

  import numpy as np
  arr = np.array([1,2,3,4])
  print(arr.dtype)
  
Output:
  int64
  
 - Get the data type of an array containing strings:
   import numpy as np
   arr = np.array(['apple','banana','cherry'])
   print(arr.dtype)

Output:
   <U6
   
- Create an array with data type string
import numpy as np
arr = np.array([1,2,3,4],dtype='S')
print(arr)
print(arr.dtype) 

Output:

[b'1' b'2' b'3' b'4']
|S1

- Create an array with data type 4 bytes integer:
import numpy as np
arr = np.array([1,2,3,4], dtype='i4')
print(arr)
print(arr.dtype)

Output:
[1 2 3 4]
int32

- A non-integer string like 'a' can not be converted to integer (will raise an error):

import numpy as np 
arr = np.array(['a','2','3'], dtype='i')

Output:
Traceback (most recent call last):
  File "./prog.py", line 3, in 
ValueError: invalid literal for int() with base 10: 'a

- Converting Data type on existing arrays
- The best way to change the data type of an existing array, is to make a copy of the array with the astype() method.
- The astype() function creates a copy of the array, and allows you to specify the data type as a parameter.

import numpy as np
arr = np.array([1.1,2.1,3.1])
newarr = arr.astype('i')
print(newarr)
print(newarr.dtype) 

Output:
[1 2 3]
int32   // 'i' as parameter
int64   // 'int' as parameter

// Change data type from integer to boolean:
import numpy as np
arr = np.array([1,0,3])
newarr = arr.astype(bool)

print(newarr)
print(newarr.dtype)

Output:

[ True False True]
bool













  
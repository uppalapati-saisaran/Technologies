
- Lists are used to store multiple items in a single variable.

  thislist = ["apple","banana","Cherry"]
  print(thislist)
  
- List items are ordered,changeable and allow duplicate values.
- List items are indexed, the first item has index[0],
  the second item has index[1] etc.
  
Ordered - it means that the items have a defined order, and that order  
          will not change.
		  If you add new items to a list, the new items will be placed at 
		  end of the list.
          There are some list methods that will change the order,
		  but in general: the order of the items will not change.
		  
Changeable - The list is changeable, meaning that we can change,add,
             and remove items in a list after it has been created.
			 

Allow Duplicates: lists can have items with the same value.

List Length :

- To determine how many items a list has, use the len() function:
// print the number of itesm in the list:
thislist=["apple","banana","cherry"]
print(len(thislist))

- List items can of any data type:

list1 = ["apple","banana","cherry"]
list2 = [1,5,7,9,3]
llst3 = [True,False,False]

- List with strings, integers and boolean values:

list1 = ["abc",34,True,40,"male"]


- lists are defined as objects with the data type 'list':
mylist = ["apple","banana","cherry"]
print(type(mylist))

Output: 
<class 'list'>

- It is possible to use the list() constructor when creating abc
  new list.
  
  thislist = list(("apple","banana","cherry")) # note the double round-brackets
  print(thislist)
  
  
  There are four collecton datatypes in the Python programming
  language:
  
  1, List is a collection which is ordered and changeable.
     Allows duplicate members.
  2, Tuple is a collection which is ordered and unchangeable.
     Allows duplicate members.
  3, Set is a collection which is unordered,unchangeable and
     unindexed. No duplicate members.
  4, Dicitionary is a collection which is ordered**
     and changeable. No duplicate members.
	 
// Print the second item of the list:
thislist [ "apple","banana","cherry"]
print(thislist[1])
// The first item has index 0 


//Negative indexing means start from the end
// -1 refers to the last item -2 refers to the second last item etc

//Returns the third,fourth, and fifth item:
thislist = ["apple","banana","cherry","orange","kiwi","melon","mango"]
print(thislist[2:5])
// The search will start at index 2(included) 
// end at index 5 (not included).

// items from the beginning to,but NOT including "kiwi":
   print(thisist[:4])
   
// items from "cherry" to the end:
   print(thislist[2:]) 

// returns the items from orange (-4) to, but not including "mango" (-1):
   print(thislist[-4:-1]
   
// Check if "apple" is present in the list:
thislist = ["apple","banana","cherry"]
if "apple" in thislist:
	print("Yes, 'apple' is in the fruits list")
	

// To change the value of specific item, refer to the index number:
thislist = ["apple","banana","cherry"]
thislist[1] = "blackcurrant" 
print(thislist) 

// To change teh value of items within a specific range, define a list with the new values,
   and refer to the range of index numbers where you want to insert the new values:
//Change the values "banana" and "cherry" with the values "blackcurrant" and "watermelon"
thislist=["apple","banana","cherry","orange","kiwi","mango"]
thislist[1:3]=["blackcurrant","watermelon"]
print(thislist)

Output:

['apple', 'blackcurrant', 'watermelon', 'orange', 'kiwi', 'mango']

// If you insert more items that you replace, the new items will be inserted where you specified,
   and the remaining items will move accordingly.
// Change the second value by replacing it with two new values:
   thislist = ["apple","banana","cherry"]
   thislist[1:2] =["blackcurrant","watermelon"]
   print(thislist)
   
Output :

['apple', 'blackcurrant', 'watermelon', 'cherry']   

//if you insert less items that you replace, the new items will be inserted where you specified, and the 
  remaining will move accordingly.
  thislist = ["apple","banana","cherry"]
  thislist[1:3]=["watermelon"]
  print(thislist)
  
output :

['apple', 'watermelon']


// To insert a new list item, without replacing any of the existing values, we can use the insert() method.
// The insert() method inserts an item at the specified index:
thislist = ["apple","banana","cherry"]
thislist.insert(2,"watermelon")
print(thislist)

// To add an item to the end of the list, use the append() method:
thislist = ["apple","banana","cherry"]
thislist.append("orange")
print(thislist) 

// Add the elements of tropical list to thislist list:
thislist=["apple","banana","cherry"]
tropical=["mango","pineapple","papaya"]
thislist.extend(tropical)
print(thislist)

// extend() method does nto have to append lists, you can add any iterable object(tuples,sets,dictionaries etc.).
// Add elements of a tuple to a list
thislist=["apple","banana","cherry"]
thistuple=('kiwi',"orange")
thislist.extend(thistuple)
print(thislist)

// remove() method removes the specified item.
// If there are more than one item with the specified value, the remove() method removes the first occurance
thislist=["apple","banana","cherry"]
thislist.remove("banana")
print(thislist)

// pop() method removes the specified index
// if you do not specify the index, the pop() method removes the last item.
// Remove the second item:
thislist = ["apple","banana","cherry"]
thislist.pop(1)
print(thislist)

// del <<list>>[0] : removes the specified index:
// del <<list>> :  also delete the list completely.
thislist=["apple","banana","cherry"]
del thislist[0]
print(thislist)

// clear() method empties the list.
// The list still remains, but it has no content.
thislist=["apple","banana","cherry"]
thislist.clear();
print(thislist)

// you can loop through the list items by using a for loop:
thislist = ["apple","banana","cherry"]
for x in thislist:
	print(x)
	
// you can also loop through the list items by referring to their index number.
// Use the range() and len() functions to create a suitable iterable.
thislist=["apple","banana","cherry"]
for i in range(len(thislist)):
	print(thislist[i])
// The iterable created in the example above is [0,1,2] 

// Using a while loop
thislist = ["apple","banana","cherry"]
i = 0
while i < len(thislist):
	print(thislist[i])
	i = i + 1
	
// List comprehension offers the shortest syntax for looping through lists:
thislist = ["apple","banana","cherry"]
[print(x) for x in thislist]

*************************************************************************************

// List comprehension
fruits = ["apple","banana","cherry","kiwi","mango"]
newlist = []
for x in fruits:
	if "a" in x:
		newlist.append(x)
print(newlist)
// with comprehension you can do all that with only one line of code:
fruits = ["apple","banana","cherry","kiwi","mango"]
newlist = [x for x in fruits if "a" in x]
print(newlist)

// The syntax
newlist = [ expression for item in iterable if condition == True ]


// with no if statement:
newlist = [ x for x in fruits ]

// the iterable can be any iterable object, like a list, tuple, set etc.

// you can use the range() function to create an iterable:
newlist = [ x for x in range(10)]
newlist = [ x for x in range(10) if x < 5] // Accept only numbers lower than 5

// The expression is the current item in the iteration, but it is also the outcome, which you can manipulate
   before it ends up like a list item in the new list:
   newlist= [x.upper() for x in fruits ]
   
// set all values in the new list to 'hello'
newlist = ['hello' for x in fruits]

// The expression can also contain conditions, not like a filter, but as a way to manipulate the outcome.
// Return "orange" instead of "banana"
newlist = [ x if x != "banana" else "orange" for x in fruits ]


*******************************************************************************

// sort() method that will sort the list alphanumerically, ascending, by default:
thislist = ["orange","mango","kiwi","pineapple","banana"]
thislist.sort()
print(thislist)

Output: 
['banana', 'kiwi', 'mango', 'orange', 'pineapple']

thislist=[100,50,65,82,23]
thislist.sort()
print(thislist)

Output: 
[23, 50, 65, 82, 100]

// sort descending
thislist = ["orange","mango","kiwi","pineapple","banana"]
thislist.sort(reverse=True)
print(thislist)

* Customize sort function
- you can also customize your own function by using the keyword argument key = function.
- The function will return a number that will be used to sort the list (the lower number first).
- Sort the list based on how close the number is to 50.
  def myfunc(n):
	return abs(n-50) 
  thislist = [100,50,60,82,23]
  thislist.sort(key = myfunc)
  print(thislist)
Output:
[50,65,23,82,100]

* Case Insenstive Sort
- By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters:
- Case senstive can give an unexpected result:
  thislist=["banana","Orange","Kiwi","cherry"]
  thislist.sort()
  print(thislist) 
  Output:
  ['Kiwi','Orange','banana','cherry']
  
* Luckily we can use built-in functions as key functions when sorting a list.
- So if you want a case-insensitive sort function, use str.lower as a key function. 
- Perform a case-insenstive sort of the list:
  thislist=["banana","Orange","Kiwi","cherry"]
  thislist.sort(key=str.lower)
  print(thislist)
  Output:
  ['banana','cherry','Kiwi','Orange']
  
* Reverse Ordered
- What if you want to reverse the order of a list,regardless of the alphabet?
- The reverse() method reverses the current sorting order of the elements.
- Reverse the order of the list items:
  thislist=["banana","Orange","Kiwi","cherry"]
  thislist.reverse()
  print(thislist)
  Output:
  ['cherry','Kiwi','Orange','banana']
  
******************************************************************************************************

* Copy a list
- you cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1,
  and changes made in list1 will automatically also be made in list2
- There are ways to make a copy, on way is to use the built-in List method copy().
- Make a copy of a list with the copy() method.
  thislist = ["apple","banana","cherry"]
  mylist = thislist.copy()
  print(mylist)
  Output: 
  ['apple','banana','cherry']
  
- Make a copy of a list with the list() method:
  thislist = ["apple","banana","cherry"]
  print(mylist)
  
*****************************************************************************************************

* Join Lists

- There are several ways to join, or concatenate, two or more lists in Python.
- One of the easiest ways are by using the + operator.
- Join two list:

  list1 =["a","b","c"]
  list2 =[1,2,3]
  list3 = list1 + list2
  print(list3)
  Output:
  ['a','b','c',1,2,3]
  
- Another way to join two lists is by appending all the items from list2 into list1, one by one:

  list1=["a","b","c"]
  list2=[1,2,3]
  for x in list2:
	list1.append(x)
  print(list1)
  Output:
  ['a','b','c',1,2,3]
  
- Use the extend() method to add list2 at the end of list1:
  list1 = ["a","b","c"]
  list2 = [1,2,3]
  list1.extend(list2)
  print(list1)
  Output:
  ['a','b','c',1,2,3]
  
******************************************************************************************************

Python has a set of built-in methods that you can use on lists.

append() - Adds an element at the end of the list.
clear() - Removes all the elements from the list.
copy() - Returns a copy of the list
count() - Returns the number of elements with the specified value.
extend() - Add the elements of a list(or any iterable), to the end of the current list.
index() - Returns the index of the first element with the specified value.
insert() - Adds an element at the specified position
pop() - Removes the element at the specified position
remove() - Removes the item with the specified value
reverse() - Reverses the order of the list.
sort() - Sorts the list

*****************************************************************************************************

    
  
  




  
  
 

















   
   
   
   
























  


	 
  












		  

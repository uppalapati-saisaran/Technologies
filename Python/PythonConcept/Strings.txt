- Get the character at position 1 (remember that the first character has the position 0):
  a = "Hello, World!"
  print(a[1])
  
- Since strings are arrays,we can loop through the characters in a string, with a for loop.
  for x in "banana":
   print(x)
   
- The len() function returns the length of the string:
  a = "Hello, World!"
  print(len(a))

- To check if a certain phrase or character is present in a string, we can use the keyword in.

  txt="The best things in life are free!"
  print("free" in txt)
  
- Print only if "free" is present:
 
  txt = "The best things in life are free!"
  if "free" in txt:
	print("Yes, 'free' is present.")
	
- Check if "expensive" is NOT present in the following text:
  txt = "The best things in life are free!"
  print("expensive" in txt)
  
- Print only if "expensive" in not present:
  txt = "The best things in life are free!"
  if "expensive" not in txt:
	print("No, 'expensive' is NOT present.")
	
- Get the characters from position 2 to position 5(not included):
  b = "Hello, World!"
  print(b[2:5])
  
- By leaving out the start index, the range will start at the first character:
  Get the characters from the start to position 5(not included):
  
  b="Hello, World!"
  print(b[:5])
  
- By leaving out the end index, the range will go the end:
  b="Hello, World!"
  print(b[2:])
  
- Use negative indexes to start the slice from the end of th string:
  
  From: "o" in "World!" (position -5)
  To, but not included: "d" in World! (position -2):
  b = "Hello, World!"
  print(b[-5,-2])
  
- The upper() method returns the string in uppercase
  a = "Hello, World!"
  print(a.upper())
  
- The lower() method returns the string in lowercase
  a = "Hello, World!"
  print(a.lower())
  
- The strip() method removes any whitespace from the beginning or the end:
  a = "Hello, World!"
  print(a.strip()) # returns "Hello, World!"
  
- The replace() method replaces a string with another string.
  a = "Hello, World!"
  print(a.replace("H","J"))

- The split() method returns a list where the text between the specified separator becomes the list items,
  a = "Hello, World!"
  print(a.split(",")) # returns ['Hello','World']

- Merge variable a with variable b into variable c:
  a = "Hello"
  b = "World"
  c = a + b
  print(c)
  
- To add a space between them, add a " ":
  a = "Hello"
  b = "World"
  c = a + " " + b
  print(c)
  
- Use the format() method to insert numbers into strings:
  age = 36
  txt = "My name is John, and I am {}"
  print(txt.format(age)) 
  
- The format() method takes unlimited number of arguments, and are placed into the respective placeholders:
  quality = 3
  itemno = 567
  price = 49.95
  myorder = "I want {} pieces of item {} for {} dollars."
  print(myorder.format(quality,itemno,price))

- You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:
  quantity = 3
  itemno = 567
  price = 49.95
  myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
  print(myorder.format(quality,itemno,price))

- The escape character allows you to use double quotes when you normally would not be allowed:

  txt = "We are the so-called \"Vikings\" from the north."

- String methods: 

  - All string methods return the new values. They do not change the original string.

  capitalize() - Converts the first character to uppercase
  casefold() - converts string into lower case.
  center() - Returns a centered string.
  count() - Returns the number of times a specified value occurs in a string.
  encode() - Returns an encoded version of the string
  endswith() - Returns true if the string ends with the specified value
  expandtabs() - sets the tab size of the string
  find() - searches the string for a specified value and returns the position of where it was found
  format() - formats specified values in a string 
  format_map() - formats specified values in a string
  index() - Searches the string for a specified value and returns the position of where it was found
  isalnum() - returns true if all characters in the string are alphanumeric
  isalpha() - returns true if all characters in the string are in the alphabet
  isascii() - returns true if all characters in the string are ascii characters.
  isdecimal() - returns true if all characters in the string are decimals.
  isdigit() - Returns True if all characters in the string are digits
  isidentifier() - Returns True if the string is an identifier
  islower() - Returns if all characters in the string are lowercase
  isnumeric() - Returns if all characters in the string are numeric
  isprintable() - Returns true if all characters in the string are printable.
  isspace() - Returns True if all characters in the string are whitespaces
  istitle() - Returns True if the string follows the rules of the title.
  isupper() - Returns True if the characters in the stirng are uppercase.
  join() - Joins the elements of an iterable to the end of the string.
  ljust() - Returns a left justified version of the string.
  lower() - converts a string into lowercase
  lstrip() - returns a left trim version of the string.
  maketrans() - Returns a translation table to be used in translations.
  partition() - Returns a tuple where the string is parted into three parts.
  replace() - Returns a string where a specified value is replaced with a specified value.
  rfind() - Searches the string for a specified value and returns the last position of where it was found.
  rindex() - Searches the stirng for a specified value and returns the last position of where it was found.
  rjust() - retunrs a right justified version of the string.
  rpartition() - Returns a tuple where the string is parted into three parts.
  rsplit() - Splits the string at the specified separator, and returns a list.
  rstrip() - returns a right trim version of the string.
  split() - Splits the string at the specified separator, and returns a list.
  splitlines() - Splits the string at line breaks and returns a list
  startswith() - Returns true if the string starts with the specified value.
  strip() - returns a trimmed version of the string
  swapcase() - swaps cases, lower case becomes upper case and vice versa
  title() - Converts the first character of each word to uppercase.
  translate() - returns a string into uppercase
  zfill() - fills the string with a specified number of 0 values at the beginning.
  
  
    


- A RegEx, or Regular Expression, is a sequnce of characters that forms a search pattern.

- Python has a built-in package called re, which can be used to work with Regular Expressions.

  import re
  txt = "The rain in Spain"
  x = re.search("^The.*Spain$",txt)
  if x:
	print("Yes! We have a match!")
  else:
	print("No match")
	
****************************************************************************************************
	
- findall() function returns a list containing all matches.

  import re
  txt = "The rain in Spain"
  x = re.findall("ai",txt)
  print(x)
  
  ['ai', 'ai']
  
  import re
  txt = "The rain in Spain"
  #Check if "Portugal" is in the string:
  x = re.findall("Portugal",txt)
  print(x)
  
  if x:
	print("Yes, there is at least one match!")
  else:
    print("No match")
	
  [] 
  No match
  
*******************************************************************************************************
  
- search() function searches the string for a match, and returns a Match object if there is a match.
- if there is more thatn one match, only the first occurance of the match will be returned:
- search for the first white-space character in the string:

import re
txt = "The rain in Spain"
x=re.search("\s",txt)
print("The first white-space character is located in position:",x.start()) 

The first white-space character is located in position: 3

 import re
 txt = "The rain in Spain"
 #Check if "Portugal" is in the string:
 x = re.search("Portugal",txt)
 
 None
 
*********************************************************************************************************
 
- Split() function returns a list where the string has been split at each match:
- Split at each white-space character
import re
txt="The rain in Spain"
x=re.split("\s",txt)
print(x)

['The', 'rain', 'in', 'Spain']

- You can control the number of occurences by specifying the maxsplit parameter:
- Split the string only at the first occurrence.
import re
txt = "The rain in Spain"
x = re.split("\s",txt,1)
print(x)
â€‹
['The', 'rain in Spain']

***********************************************************************************************************

- The sub() function replaces the matches with the text of your choice:
- Replace every white-space character with the number 9:
import re
txt = "The rain in Spain"
x=re.sub("\s","9",txt)
print(x) 

The9rain9in9Spain

- You can control the number of occurences by specifying the count parameter:
- Replace the first 2 occurances:
import re
txt = "The rain in Spain"
x=re.sub("\s","9",txt,2)
print(x)

The9rain9in Spain

**************************************************************************************************************

- A match object is an object containing information about the search and the result.
- if there is no match, the value None will be returned, instead of the Match Object.
- Do a search that will return a Match Object:
  import re
  txt = "The rain in Spain"
  x = re.search("ai",txt)
  print(x) #this will print an object
  
- The match object has properties and methods used to retrieve information about the search, and the result:
  
  span() - returns a tuple containing the start and end positions of the match.
  string() - returns the string passed into the function
  group() returns the part of the string where there was a match
  
- The regular expression looks for any words that starts with an upper case "S":
  import re
  
  txt = "The rain in Spain"
  x = re.search(r"\bS\w+",txt)
  print(x.span())
  
  (12, 17)
  
- print(x.string) 

  The rain in Spain
  
- print(x.groud()) 
  
  Spain
  
*********************************************************************************************************************

Meta characters :

Metacharacters are characters with a special meaning:

[] - A set of characters - "[a-m]"
\  - Signals a special sequence (can alos be used to escape special characters) - "\d" 
.  - Any character (except newline character)  - "he..o"
^  - Starts with - "^hello"
$  - Ends with - "planet$"
* - Zero or more occurrences
+ - One or more occurance
? - Zero or one occurances
{} - Exactly the specified number of occurrenes
! - Either or
() - Capture and group

***********************************************************************************************************************

Special Sequences : 

\A  - Returns a match if the specified characterss are at the beginning of the string -  "\AThe"

\b  - Returns a match where the specified characters are at the beginning or at the end of a word   = r"\bain"

\B  - Returns a match where the specified characters are present, but NOT at the beginning or at the end) of a word.

\d  - Returns a match where the string contains digits (numbers from 0-9)

\D  - Returns a match where the string DOES NOT contain digits

\s  - Returns a match where the string contains a while space character.

\S  - Returns a match where the string DOES NOT contain a white space character

\w - Returns a match where the string contains any word chracters ( a to z, 0 to 9 , the underscore _character)

\W - Returns a match where the string DOES NOT contain any word characters.

\Z - Returns a match if the specified characters are at the end of the string 

***********************************************************************************************************************

Sets :

A set is a set of characters inside a pair of square brackets [] with a special meaning:

[arn] - Returns a match where one of the specified characters (a,r, or n) is present.

[a-n] - Returns a match for any lower case character, alphabetically between a and n.

[^arn] - Returns a match for any character EXCEPT a, r, and newline

[0123] - Returns a match where any of the specified digits are present

[0-9] - Returns a match for any digit between 0 and 9

[0-5][0-9] - Returns a match for any two-digit numbers from 00 and 59

[a-zA-Z] - Returns a match for any character alphabetically between a and z, lower case or UPPER case

[+] - In sets, +,*,.,|,(),$,{} has no special meaning, so [+] means : return a match for any + character in the string.


**************************************************************************************************************************


 




  

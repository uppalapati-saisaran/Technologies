
- The try block lets you test a block of code for errors.
- The except block lets you handle the error.
- The else block lets you execute code when there is no error.
- The finally block lets you execute code, regardless of the result of the try and except blocks.


Exception Handliing

- These exceptions can be handled using the try statement. 

  try:
	print(x)
  except:
	print("An exception occurred") 
	
  An exception occurred
  
- Many exceptions 

  try:
    print(x)
  except NameError:
	print("Variable x is not defined")
  except:
    print("Something else went wrong")

  Variable x is not defined
  
- The try block does not generate any error:

  try:
	print("Hello")
  except:
	print("Something went wrong")
  else:
    print("Nothing went wrong") 

  Hello
  Nothing went wrong
  
- The finally block, if specified, will be executed regardless if the try block raises an error or not

  try:
   print(x)
  except:
	print("Somethign went wrong")
  finally:
	print("The 'try except' is finished")
	
  Something went wrong
  The 'try except' is finished
  
- The finally block, can be useful to close objects and clean up resources:
- Try to open and write to a file that is not writable:
- The program can continue, without leaving the file object open. 

  try:
	f = open("demofile.txt")
    try:
		f.write("Lorum Upsum")
	except:
		print("Something went wrong when writing to the file")
	finally:
	    f.close()
  except:
	print("Something went wrong when opening the file")
	

- Raise an exception 
- As a python developer you can choose to throw an excpetion if a conidition occurs.
- To throw (or raise) an exception, use the raise keyword.
- Raise an error and stop the program if x is lower than 0:
  
  x=-1
  if x < 0:
	raise Exception("Sorry, no numbers below zero")

- Define what kind of error to raise, and the text to print to the user.

  x = "hello"
  if not type(x) is int:
	raise TypeError("Only integers are allowed") 
	
	



	
	
  
  

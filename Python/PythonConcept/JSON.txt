
- JSON is a syntax for storing and exchanging data.

- JSON is text, written with JavaScript object notation.

- Python has a built-in package called json, which can be used to work with JSON data.

- Import the json module:

  import json 
  
********************************************************************************************
  
- Convert from JSON to Python:

  import json
  #some json
  x = '{"name":"John","age":30,"city":"New York"}'
  
  #parse x:
  y = json.loads(x)
  
  #the result is a python dictionary:
  print(y["age"])
  
Output :

  30 
  
********************************************************************************************
  
- Convert from Python to JSON 

  import json
  # a Python object (dict):
  x = {
	"name" : "John",
	"age" : 30,
	"city" : "New York"
  }
  
  #convert into JSON
  y = json.dumps(x)
  
  # the result is a JSON string:
  print(y) 
  
  Output: 
  
	{"name": "John", "age": 30, "city": "New York"}
	
*******************************************************************************************

- You can convert Python objects of the following types, into JSON strings:

1, dict - Object 
2, list - Array
3, tuple - Array
4, string - String 
5, int - Number 
6, float - Number 
7, True - true
8, Flase - false
9, None - null 

import json
print(json.dumps("name": "John","age" : 30}))
print(json.dumps(["apple","bananas"]))
print(json.dumps(("apple","bananas")))
print(json.dumps("hello"))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None)) 

Output:
{"name": "John", "age": 30}
["apple", "bananas"]
["apple", "bananas"]
"hello"
42
31.76
true
false
null

*************************************************************************************************

import json

x = {
"name" : "John",
"age" : 30,
"married" : True,
"divorced" : False,
"children" : ("Ann","Billy"),
"pets": None,
"cars": [
{"model": "BMW 230", "mpg": 27.5},
{"model:: "Ford Egde", "mpg" : 24.1}
]
}

print(json.dumps(x))

Output: 

{"name": "John", "age": 30, "married": true, "divorced": false, "children": ["Ann","Billy"], "pets": null, "cars": [{"model": "BMW 230", "mpg": 27.5}, {"model": "Ford Edge", "mpg": 24.1}]}


// Use the indent parameter to define the numbers of indents. 
json.dumps(x,indent = 4)

{
    "name": "John",
    "age": 30,
    "married": true,
    "divorced": false,
    "children": [
        "Ann",
        "Billy"
    ],
    "pets": null,
    "cars": [
        {
            "model": "BMW 230",
            "mpg": 27.5
        },
        {
            "model": "Ford Edge",
            "mpg": 24.1
        }
    ]
}

// You can also define the separators, default value is (",",": "), which means using a comma and space to separate each object, and a colon and a space to separate keys from values. 
json.dumps(x,indent = 4, separators=(". "," =")) 

{
    "name" = "John".
    "age" = 30.
    "married" = true.
    "divorced" = false.
    "children" = [
        "Ann".
        "Billy"
    ].
    "pets" = null.
    "cars" = [
        {
            "model" = "BMW 230".
            "mpg" = 27.5
        }.
        {
            "model" = "Ford Edge".
            "mpg" = 24.1
        }
    ]
}

*********************************************************************************************************

json.dumps() method has parameters to order the keys in the result.

json.dumps(x,indent=4,sort_keys=True)

{
    "age": 30,
    "cars": [
        {
            "model": "BMW 230",
            "mpg": 27.5
        },
        {
            "model": "Ford Edge",
            "mpg": 24.1
        }
    ],
    "children": [
        "Ann",
        "Billy"
    ],
    "divorced": false,
    "married": true,
    "name": "John",
    "pets": null
}




	
	
* Python divides the operators in the following groups:
1, Arithmetic operators
2, Assignment operators
3, Comparison operators
4, Logical operators
5, Identity operators
7, Membership operators
8, bitwise operators

1, Arithmetic operators 

  +, Addition 
  -, Substraction
  *, Multiplication
  /, Division
  %, Modulus
  **, Exponentiation
  //, Floor division - rounds the result down to the nearest whole number.
  
2, Assignment operators
  
  = , += , -= , *= , /= , %=, //= , **== , 
  
  &=,
  x = 5
  x &= 3
  print(x)
  Output : 1
  
  |=,
  x = 5
  x |= 3
  print(x)
  Output : 7
  
  ^=,
  x = 5
  x ^= 3
  print(x)
  Output: 6
  
  x = 5
  x >>= 3
  print(x)
  Output: 0
  
  x = 5
  x <<= 3
  print(x)
  Output: 40
  
3, Comparison operators
   == - Equal
   != - Not equal
   > - Greater than
   < - Less than
   >= - Greater than or equal to
   <= - Less than or equal to

4, Logical Operators
   and - Returns True if both statements are true
   or -  Returns True if one of the statements is true
   not - Reverse the result, returns False if the result is true. 
   
5, Identity Operatoras

- Identity operators are used to compare the objects, not if they are equal, 
  but if they are actually the same object,with the same memory location.
  
  is - Returns True if both variables are the same object.
  
  x = ["apple","banana"]
  y = ["apple","banana"]
  z = x
  print(x is z)
  #returns True because z is the same object as x
  print(x is y)
  #returns False because x is not the same object as y, even if they have the same content.
  print(x == y)
  #to demostrate the difference between "is" and "==": this comparsion returns True because x is equal to y
Output:
  True
  False
  True
  
  is not - Returns True if both variables are not the same object.
  x = ["apple","banana"]
  y = ["apple","banana"]
  z = x
  print(x is not z)
  #returns False because z is the same object as x
  print(x is not y)
  #returns True because x is the same object as y, even if they have the same content
  print(x!=y)
  #to demostrate the difference between is not and !=: this comparsion returns False because
  is equal to y.
  
6, Membership Operators:
   
- Membership operators are used to test if a sequence is presented in an object:

  in - Returns True if a sequence with the specified value is present in the object.
  x = ["apple","banana"]
  print("banana" in x)
  # returns True because a sequence with the value "banana" is in the list.
 
  not in - Returns True if a sequence with the specified value is not present in the object.
  x = ["apple","banana"]
  print("pineapple" not in x)
  # returns True because a sequence with the value "pineapple" is not in the list
  
7, Bitwise Operators

  & - AND - Sets each bit to 1 if both bits are 1
  | - OR - Sets each bit to 1 if one of two bits is 1
  ^ - XOR - Sets each bit to 1 if only one of two bits is 1
  ~ - NOT - Inverts all the bits
  << - Zero fill left shift - Shift left by pushing zeros in from the right and let the leftmost bits fall of.
  >> - Sigend right shift - Shift right by pushing copies of the leftmost bit in from the left, snd let the rightmost bits fall off.
  
  
  
  
  

   
   
   
  
